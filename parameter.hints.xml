<application>
  <component name="ParameterNameHintsSettings">
    <blacklists>
      <blacklist language="TypeScript" />
      <blacklist language="Java">
        <added pattern="org.jboss.shrinkwrap.resolver.api.ResolveStage.resolve(canonicalForms)" />
        <added pattern="com.xlrit.gears.engine.graphql.GraphQLClient.invoke(s)" />
        <added pattern="com.xlrit.gears.engine.graphql.GraphQLClient.invoke(preQuery,vars)" />
      </blacklist>
      <blacklist language="Angular HTML Template" />
      <blacklist language="Scala">
        <added pattern="com.xlrit.gears.generator.DependsResolverTest.normalized(ss)" />
        <added pattern="com.xlrit.gears.generator.DK.DK_Base.DK_Base(name,arrow)" />
        <added pattern="org.scalatest.FunSuiteLike.test(testName,testTags,testFun,pos)" />
        <added pattern="com.xlrit.gears.generator.GearsLexerTest.verify(input,expected)" />
        <added pattern="com.xlrit.gears.generator.GearsScannerTest.verify(input,expected)" />
        <added pattern="com.xlrit.gears.generator.test.ParserHelper.parse(production,input)" />
        <added pattern="com.xlrit.gears.generator.GearsParser.ckw(name)" />
        <added pattern="com.xlrit.gears.generator.DependsResolverTest.resolveDepsForResult(input)" />
        <added pattern="scalax.collection.GraphTraversal.FluentProperties.withMaxDepth(maxDepth)" />
        <added pattern="com.xlrit.gears.generator.depends.DependsResolverTest.normalized(ss)" />
        <added pattern="org.scalatest.FunSuiteLike.ignore(testName,testTags,testFun,pos)" />
        <added pattern="org.singlespaced.d3js.d3.select(selector)" />
        <added pattern="(name)" />
        <added pattern="(name, value)" />
        <added pattern="com.xlrit.gears.generator.design.ProcessDesignerTest.parseVerification(input)" />
        <added pattern="com.xlrit.gears.generator.design.verification.Verification.Verification(name,attrs)" />
        <added pattern="makeBranch(step,condition)" />
        <added pattern="com.xlrit.gears.generator.genjava.JavaStepExporter.printlnStmt(line)" />
        <added pattern="com.xlrit.gears.generator.emit.bpmn.BpmnConverter.BpmnNameMapping.getNodeId(step,category,prefix)" />
        <added pattern="com.xlrit.gears.generator.BasicType.BasicType(name,ref)" />
        <added pattern="com.xlrit.gears.generator.NumericType.NumericType(name,ref)" />
        <added pattern="com.xlrit.gears.generator.Type.Type(name,ref)" />
        <added pattern="com.xlrit.gears.generator.test.BaseSuite.test(testName,testTags,testFun,pos)" />
        <added pattern="com.xlrit.gears.generator.emit.JavaBlockConverter.commented(comment,statements)" />
        <added pattern="com.xlrit.gears.generator.parser.GearsParser.ckw(name,token)" />
        <added pattern="com.xlrit.gears.generator.emit.fmt.*" />
        <added pattern="com.xlrit.gears.generator.util.OptionEnhancements.RichOption.getOrError(msg)" />
        <added pattern="com.xlrit.gears.generator.emit.JavaExprTranslator.todo(description)" />
        <added pattern="com.xlrit.gears.generator.trans.Indexer2.typedTarget(name,typ)" />
        <added pattern="com.xlrit.gears.generator.emit.JavaExprTranslatorTest.translate(input)" />
        <added pattern="com.xlrit.gears.generator.emit.JavaExprTranslator.RichExpression.call(name,params)" />
        <added pattern="com.xlrit.gears.generator.emit.JavaExprTranslatorTest.translateCompr(input,expectation)" />
        <added pattern="com.xlrit.gears.generator.test.BaseSuite.matchCode(pattern)" />
      </blacklist>
      <blacklist language="JavaScript" />
      <blacklist language="Groovy" />
      <blacklist language="Kotlin" />
      <blacklist language="SQL" />
    </blacklists>
  </component>
</application>